char* path[]
path가 가리키는 곳에는 char형의 배열이 있다.

서식화된 입출력 함수
printf("서식",출력할 매개변수)
scanf_s("서식", 입력할 매개변수들)

%d,	%c,	%s,	%x,
%o,	%f,	%lf,	%e,	%p

gets_s(문자 배열,최대 문자수)
puts(문자배열)
-문자열은 printf,scanf보다 gets_s,puts가 처리속도가 더 빠르다

getch()	-키보드로 문자 하나를 입력, 입력한 내용을 화면에 보여주지 않는다.
getche()	-키보드로 문자 하나를 입력, 입력한 내용을 화면에 보여준다.
getchar()	-엔터를 누를때까지 입력한 것을 메모리(버퍼)에 모두 저장해놓고
	 그 중에서 한 문자만 꺼낸다. 문자열을 자주 받고 자주 처리 할때,멀티테스킹 할때.

*버퍼(buffer)
cpu와 주변기기(보조기억장치 등)의 속도차이 때문에 만든 메모리 저장소

putchar(문자형 변수)	-표준출력장치(모니터)에 문자 하나를 출력한다.
putch(문자형 변수)		-putchar()와 기능 동일



*strncmp(A문자열,B문자열,4)
몇개를 비교하는지 크기를 나타내는 패러미터가 strcmp에 추가, 역할을 동일


파일 입출력 함수
fscanf_s()
fgets()
fgetc()
fprintf()
fputs()
fgetc()
함수 앞에 f는 file

입출력 과정

1.파일 포인터 선언
FILE *변수 이름;
포인터 변수 선언과 동일. 다만 자료형이 FILE

2.fopen_s(&파일 포인터, "파일 이름", "열기 모드");
fopen_s()함수로 파일 열기
ex)fopen_s(&rfp,"c:\\temp\\data1.txt","r");
-"r"은 열기 모드, "w"는 쓰기 모드(덮어쓰기), "a"도 쓰기 모드(텍스트 뒤에 추가)
-폴도와 파일의 경로는 \를 두개씩 써야한다.

3.파일처리 함수로 파일을 읽거나 파일에 쓰기

4.fclose() 함수로 닫기
fclose(파일 포인터);

*fgets(문자 배열, 읽을 최대 문자 수, 파일 포인터);
문자열 최대 길이 '읽을 최대 문자 수 -1'만큼의 문자열을 읽어 배열에 대입
ex)fgets(ss,200,rfp);

*EOF(End Of File) - 파일의 끝을 표시
->feof() eof이면 1(true)
*BOF(Begin Of File) - 파일의 시작을 표시

--------------입출력(파일,DB,Network)의 기본 작업순서)------------------

1.open(connection)

2.작업

3.close(생략 가능한 언어가 있지만 기본은 close 해줘야한다.)

------------------------------------------------------------------------------

MS-DOS
:MS에서 만든 CLI(Command Line Interface)
방식의 OS
=>MS-Windows로 대체됨 GUI(Graphic User Interface)

Dos 명령어(CLI환경의 명령어)

Type 명령어
type 파일 이름
ex) type c:\C_WorkSpace\data1.txt

CD(change directory) 명령어
cd.. 	: 한단계 전 폴더로 이동
cd 폴더명 : 해당 폴더로 이동

---------------------------------------------------------------------------------

*fscanf_s(파일 포인터,"서식",입력할 매개변수들...);
ex)fscanf_s(rfp,"%d",&in)

*fputs(출력할 데이터,파일 포인터);
ex)fputs(s,rfp);

Copy 명령어
ex)copy c:\windows\win.ini c:\temp\data4.txt
    copy   복사될 파일 위치  복사된 파일을 보낼 위치

*fprintf(파일 포인터,"서식"출력할 배개변수들...);
ex)fprintf(wfp,"합계 : %d\n",hap);



*난수발생기
c언어에서 난수 구할때 seed가 필요
-seed는 난수를 구하기 위해 필요한 기본값(?)
-seed가 바뀌면 난수도 바뀜

*동적 메모리 할당 : malloc() (memory allocation)
실행시 메모리가 할당되고 heap에 저장이 된다.
static(정적) : 실행전에 미리 준비됨
dynamic(동적) : 실행시에 동작됨

*heap
자동으로 소멸되지 않음
※개발자가 소멸시켜줘야함 : free()(반납)
free시키지 않으면 memeory leak(메모리 누수) 발생
heap은 stack과 비교할때 상대적으로 많은 양의 데이터를 효과적으로 처리하기 위해 설계

기본형
포인터 변수 = (포인터 변수의 데이터형*) malloc(포인터 변수의 데이터형 크기* 필요한 갯수)
ex) p = (int*) malloc(4*3);
-(int*)인트형 포인트로 형변환
-int형의 크기 4, 필요한 갯수3 이므로 4*3. 총 12바이트를 할당

if) 자료형의 크기를 모를 경우,sizeof() 함수를 사용
p = (int*) malloc(sizeof(int) * 3);


배열과 비슷한 모습
int a[3] = {1,2,3};				p = malloc(4*3);

stack(자동변수-auto)			heap
[ 1 | 2 | 3 ]			===>	[ 1 | 2 | 3 ] 

배열의 포인터a가 첫 칸의 주소를 알려준다.	포인터 p가 첫칸의 주소를 알려준다.
(놔둬도 모든 값 자동 소멸)			이때,p가 가지고 있는 주소값은 stack에 저장된다.

※p에 들어있는 주소값은 자동삭제되지만 p가 가리키던 동적할당된 데이터는 
자동 삭제 되지 않고 미아가 되서 메모리를 계속 점유(memory leak)하게 된다.
이런 memory leak이 커지면 서버에 부하가 걸리고 서버가 다운되거나 문제가 생긴다.
-java에서는 garbage collector가 이런 memory leak들을 체크하다 일정량 이상 되면 자동 정리한다.
					