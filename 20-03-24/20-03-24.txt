클래스		추상클래스		인터페이스

멤버변수		추상메소드		멤버변수X
메소드		인스턴스 생성불가		일반메소드X
					인스턴스 생성불가
					추상메소드
					상수

*추상클래스
추상 메소드를 포함한 클래스는 초상 클래스여야한다.

abstract class Shape{			//추상 클래스
	abstract public void draw();		//추상 메소드
}

-코드가 구현되어 있지 않은 추상 메소드를 포함한 추상 클래스
추상 메소드는 코드가 없는 미완성이므로 객체 생성 불가능.
보통 상속의 슈퍼클래스로 사용.
상속받은 하위클래스들이 오버라이딩 하여 사용


*인터페이스
interface Phone{
	public static final int TIMEOUT = 10000;		//상수, public static final 생략가능
	public abstract void sendCall{};		//추상메소드 public abstract 생략가능
	public abstract void receiveCall();		
	public default void printLogo(){		//default 메소드, public 생략가능
		syso
	};
}

-SW 모듈의 규격설정
객체 생성 불가, 추상클래스처럼 추상메소드를 포함하는만큼 객체(인스턴스)를 생성 할 수 없다.
인터페이스 타입의 레퍼런스 변수는 선언 가능
인터페이스 끼리 상속
※필요한 모듈을 인터페이스로 규격화 시켜 지정. 
상속받은 클래스들은 추상메소드로 이루어진 규격을 받아 오버라이딩 하여 코딩
(상속받은 후 규격에 맞춰 오버라이딩 하지 않으면 오류가 발생하므로 오류 해결을 클릭하면 자동으로
오버라이딩 해야하는 추상메소드들이 나타난다. 그걸 오버라이딩 함으로써 요구되는 규격이 맞춰진다.)


*개발방법론
M-Module-data
V-View    -UI
C-Controller-logic


*import 단축키
ctrl+shift+o


*sub 폴더(class 안에 class)
class 선언시 패키지에 .~붙이면 서브 폴더로 들어간다.
ex)
UI class 생성 후 UI.Time 생성시 별도의 클래스가 생기는것이 아닌
UI 클래스에 포함된 UI.Time 서브 클래스가 생성

*개발자는 자신만의 toString으로 오버라이딩 해서 사용한다
source메뉴-generate tostring하면 tosting 기본 형태가 자동으로 코딩된다.
이걸 자신이 쓸 모양으로 오버라이딩하여 사용한다


*객체 비교와 equals()메소드
==연산자
a == c : 레퍼런스 같은가?
안에 있는 내용이 같은지가 아닌 그걸 가리키는 레퍼런스가 같은지

a.equals(b) : 내용이 같은가?
레퍼런스가 아닌 그 안에 들어있는 내용이 같은지


*Wrapper클래스
기본타입을 클래스화
ArrayList와 같은 Collection에서는 클래스(객체)만 처리 가능
기보타입 대신 Wrapper클래스 사용


*박싱과 언박싱
기본타입값을 Wrapper 객체로 변환하는 것(클래스에 넣는다)을 박싱이라 하고,
객체가 같는 값을 꺼내 기본타입으로
-자동 언박싱
박싱       Integer ten =10;
언박싱    int n = ten;
int	->	integer객체
10	<-	     10
 n		    ten

ex)
int n = 10;
integer intObject = n;

int m = intObject + 10;

※n= 10 intObject = 10 m = 20

문자열 s를 10진수로 변환
static int parseInt(String s)
->Integer.parseInt()

정수 i를 문자열로 변환
static string toString(int i)
integer.toSting()



*NEW String()
리터럴로 생성. 
String s = "Hello";
String s = new String("Hello");

String a = "Hello";		//""사이의 값이 같을 경우 메모리에 추가 생성하지 않음
String b = "Hello";		//※a와 b는 "Hello"가 만들어진 같은 곳을 가리킨다
String c = new String("Hello");	//하지만 new로 만들어진 곳은 각자 생성
String d = new String("Hello");

스트링 객체는 수정 불가능
String s= new String("Hello");
String t = s.concat("Java");
s = Hello ,t = HelloJava

s가 가리키는 곳이 변하지 않는다
sting 비교할때 반드시 equals()사용

문자열 비교
int res = java.compareTo(cpp);
java와 cpp 문자열을 사전순으로 비교하여 현재 문자열보다 먼저 나오면 음수, 나중에 나오면 양수



*StringBuffer
String 클래스와 쓰임새가 같지만 문자열 변경시 문자열 자체를 바꾼다.
ex)
"I love".concat("Java."); => I love Java라는 문자열을 새로운 메모리에 넣는다
(기존의 I love는 쓰레기값으로 남는다)
StringBuffer사용시 I love 문자열 자체를 I love Java로 변경하여 메모리 활용이 높다


*String trim()
문자열 앞뒤에 공백 문자 제거
String a = "    abcd     def   ";
string c = a.trim()
=>c= "abcd    def"  앞뒤 공백 제거, 중간 공백은 제거 되지 않는다


*charAt(int index)
문자열의 트정 위치에 있는 문자를 알아낼 수 있다.
String a = "class";
char c = a.charAt(2);  => //a의 2번 인덱스에 있는 'a' 출력

*substring()
문자열의 특정 위치부터 남은 문자열
ex)
String fileName = "HelloWorld.java";
	System.out.println(fileName.substring(5));	//fileName의 5번 인덱스부터 출력
						//World.java
	System.out.println(fileName.substring(5, 6));	//fileName의 5번 인덱스부터 출력 6번 인덱스에서 종료
						//W

※확장자 찾기 응용-보통 확장자는 .뒤에 나오므로 (fileName.indexof("."))를 활용
 .뒤 부터 나와야하니까 +1붙여서 사용한다.
syso(fileName.substring(fileName.indexof(".")+1));		//.뒤의 글자,즉 확장자만 출력
						//java
※중간 중간에 .이 붙는 파일이름이 나올때는 lastIndexOf(".")를 활용
indexOf()가 가장 앞에 있는 .을 찾는다면 lastIndexOf()는 가장 뒤에 있는 .을 찾는다
fileName2 = "a.b.c.10.txt"
syso(fileName.substring(fileName.lastIndexOf(".")+1));

