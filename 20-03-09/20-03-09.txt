*visual studio 대체제
Xcode
visual studio code


*배열
연속된 변수
int aa[4] - 기본형
aa[0] aa[1] aa[2] aa[3] : 배열이라 int형(4byte) 저장공간 4개를 할당
따라서 16byte를 사용

*선언과 동시에 초기화
int aa[4] = {100,200,300,400};
int aa[4] = {100,200}    => aa[] : 100 , 200 , 0, 0(초기화 안 한 곳은 0으로)
int aa[1000] = {0}       => aa[] : 0, 0, 0, 0...(따라서 0으로 하나만 넣으면 전부 0으로)
int aa[]		    => 크기를 미리 지정하지 않고 초기화 하면 초기화한 크기만큼 저장공간을 가진다
ex) int aa[] = { 100,200,300 } => 3크기의 배열이 된다


*배열 크기 알아내기
배열 크기= sizeof(배열 이름)/sizeof(데이터 타입);
ex) sizeof(aa)/sizeof(int);


정수형 배열			문자열 배열
int aa[4] = {100,200,300,400};		char ss[4] = {'X','Y','Z','\0};
				
				char ss[4];
				ss[0] = 'X';
				ss[1] = 'Y';
				ss[2] = 'Z';
				ss[3] = '\0';

				char ss[4] = "XYZ"


*strlen()함수 - 문자열의 문자 갯수 구하는 함수STRing LENgth
널 문자를 제외한 문자들의 갯수만 구한다
ex)aa[5] = "lol"
sizeof(aa)/sizeof(char) = 5	//배열의 전체 크기를 구한다
strlen(aa) = 3		//널과 빈칸을 제외한 문자갯수만을 구한다.

*strcpy_s() - STRing CoPY
문자열 배열A에 문자열 배열B를 '최대 길이'만큼 복사.(최대 길이는 A의 크기)
strycpy_s(aa,4,"XYZ"); - 기본형. 길이가 4인 "XYZ"문자열을 aa에 카피
strcpy_s(aa, 4, tt);      - 기본형. 길이가 4인 tt배열을 aa에 카피

*strcat_s() - String -String conCATenate
두 문자열을 이어주는 함수
문자열 A와 문자열 B를 이어 다시 문자열 A에 넣음
최대길이는 A,B합친 길이의 +1이상(널문자 자리)이어야함
strcat_s(aa,7,bb); -  합칠때 aa의 널자리를 기준으로 합친다.

*strcmp_s() - STRing CoMPare
문자열 'A-B'의 결과를 돌려줌.
결과가 0이 나오면 A와 B가 같은 문자열이라는 뜻,그 외의 값은 다르다는 뜻
strcmp(ss,tt); ss와 tt 비교
-응용
if(!strcmp(ss,tt))	: if(strcmp(ss,tt)!=0)	: if(strcmp(ss,tt)==@)
ss와 tt가 다르면 실행하라

if(strcmp(ss,tt))	: if(strcmp(ss,tt)==0)	: if(strcmp(ss,tt)!=@)
ss와tt가 같으면 실행하라

*gets_s()
문자열 입력 함수(scanf_s()와 비슷한 기능)
ex) char ss[10]
gets_s(ss,10);

*puts()
printf()와 비슷한 기능 \n없이도 자동 줄 넘김


*2차원 배열의 초기화 - 중괄호 안에 한 행을 중괄호로 묶고 ,로 구분한다.
ex)
int aa[3][4] = {
		{1, 2, 3, 4},
		{5, 6, 7, 8},
		{9,10,11,12}
	     };
테이블을 그리듯 배치를 한 후 중괄호로 한번 더 묶어준다.
-가독성을 높이기 위해 테이블처럼 작성했지만 줄 바꿈 없어도 똑같이 작동한다.
int aa[3][4] = {{1,2,3,4},{5,6,7,8},{9,10,11,12}}; (위 2차원 배열과 같다}


*스택(stack)
First In Last Out&Last In First Out(FILO&LIFO)
먼저 들어간게 가장 마지막에 나오고 마지막에 들어간게 가장 먼저 나온다
변수는 스택으로 저장된다.
ex)int a, b, c; => 사라질 때는 스택이므로 c, b, a순으로 사라진다.


*포인터 변수 : 메모리를 저장하는 변수
char* p;	-    p가 가리키는 곳에는 char형이 있다.
(p는 가리키는 곳에 char형이 있을뿐 주소만 들어간다.)
ex)  ch 주소값이 11123이라면 
char ch = 'Z';
p=&ch
포인터 p는 ch의 주소를 가리키고 *p는 포인터가 가리키는 실제 값을 보여준다.
즉, p = 11123
*p = Z이다.


☆배열의 이름은 포인터다
ex)char a[3]
a는 포인터 변수, a가 가리키는 곳에 크기가 3인 char배열이 있다.
즉 배열 자체를 가리키는 주소값은 a에 들어있고
각 배열 칸을 가리키는 주소값은 일반 변수처럼 &a[0] ,&a[1] ,&a[2]이다.

각 주소값의 차이는 char형,즉 1byte씩 차이난다.(&a[0]+1byte(char)=&a[1])
-int형은 4byte, float형은 8byte씩 차이난다.

이때 a와 &a, &a[0]의 값은 같고  - a포인터, a포인터의 주소, a배열 첫칸의 주소는 모두 a배열의 주소
*a와 a[0]도 같다.		   -a포인터가 가리키는(배열 첫자리) 실제값, 배열 첫자리 실제값은 같다. 
(배열 이름을 포인터처럼 사용) 

