연산자(operator)
*관계 연산자
==		같다
!=		다르다
>		왼쪽이 크다
<		오른쪽이 크다
>=		왼쪽이 크거나 같다
<=		오른쪽이 크거나 같다
결과가 참이면 1(on), 거짓이면 0(off)을 출력.
-if()문 조건에 1을 넣으면 참으로 인식한다.


*논리 연산자
&&		and연산자
||		or연산자
!		not연산자
-구분할때 평소 and를 쓸때 &를 사용한다는걸 기억하자
ex) 연필 그리고 지우개 : 연필&지우개 


*비트 연산자 - 0과 1, 비트를 연산한다.
-평소 잘 안 쓰기 때문에 시험에 단골로 나온다.(computer engineering에서는 잘 사용 안함)

&		비트 논리곱		둘 다 1이면 1이다.
|		비트 논리합		둘 중 하나라도 1이면 1이다.
^		비트 배타적 논리합(XOR)	둘이 같으면 0, 다르면 1
~		비트 부정			1은 0으로 0은 1로
<<		비트 왼쪽 시프트		비트를 왼쪽으로 시프트(이동) 
<<		비트 오른쪽 시프트	비트를 오른쪽으로 시프트(이동)

-0과 1로 이루어진 비트만 계산하므로 10진수를 비트 연산자로 계산하려면 우선 2진수로 변환해야 한다.
ex)10&7			10,7 피연산자가 둘이므로 2항연산자(피연산자가 하나인 ~는 1항연산자)
10	:	  1010(2)
7	:	&0111(2)
값		=0010(2)

-시프트 연산자를 쓸때
왼쪽 시프트를 쓸때마다 *2n 오른쪽 시프트를 쓸때마다 /2n
ex) 16>>1 = 8,   16>>2 =4
     16<<1 = 32, 16<<2 =64


*우선순위가 적용되는 연산자
() [] . -> 	괄호류가 가장 빠르다
++ -- ~ !	같은 단항연산자(변수 앞에 붙음)
* / % 	는 우선순위가 같다.(나머지가 곱나누기와 같다는걸 기억하자)
+ - 	덧셈뺄셈
  :
  :
= += /=	같은 대입연산자가 가장 느리다
.	대입 연산자보다 느린 유일한 연산자


*프로그래밍에서 중요한 것들
1.변수	-프로그래밍을 시작하기 위한 기본 재료
2.조건문
	}프로그래밍이 중추들
3.반복문
4.함수

+JAVA
5.클래스
6.상수
7.인터페이스


*if() 조건문
()안에 조건이 참(1)이면 실행, 거짓(0)이면 아무 것도 하지 않음

*ns차트
순서도의 복잡성(위아래 왕복)을 없애기 위해 고안된 단방향성 차트


*switch() 조건문
()안에 정수 혹은 문자,즉 특정 숫자를 나타낼 수 있으면 그 숫자로 지정된 case를 실행
ex)
switch(a)                               switch('a')
{			    {
     case 1 :			case 97 :		==	case 'a' :
	~			       ~
	break;			       break;
     default :			default :
	~			       ~
	break;			       break;
}			    }
a변수가 1이라면 case1실행         ()안의 문자 'a'는 정수로 97이므로 case97실행
아니라면 default 실행 후	    아니라면 default 실행 후 break로 swithc문 종료
break로 switch문 종료

-switch문으로 or 만들기
switch(a)
{
	case1 :
	case2 :
	case3 :
		printf("1 or 2 or 3");
		break;
	case4 : case5 :                 //줄 사용량 최적화
		printf("4 or 5");
		break;
	default :
		printf("etc...");
}
break를 1,2에 생략하고 3에 넣음으로써 case3에서 break걸릴때까지 1,2를 포함시키도록 만든다.
(case3 결과에 1,2도 포함시킨다.)
결국 1 or 2 or 3의 결과가 출력된다.

if문으로 변환할 경우
if(a==1 || a==2 || a==3)
	pritnf("1 or 2 or 3");
else if(a==4 || a==5)
	printf("4 or 5");
else
	printf("etc...");


*return() 함수 -return이 나온 시점에서 함수 종료.
참조 함수 때 많이 사용하던 것


for() 반복문
기본형) for ( 초깃값 ; 조건식 ; 증감식 ) - 조건식이 거짓(off,0)이 될 때까지 계속 반복 실행