*main 메소드의 인자 전달
c:\>java Hello abc 3 5.7

-"abc" "3" "5.7"
args.length = 3
args[0] = "abc"
args[1] = "3"
args[2] = "5.7"


*컴파일 오류
컴파일시 나는 오류
-문법에 맞지 않게 작성된 코드(오타)

*예외(런타임 오류)
실행중 결과에 악영향을 미칠 수 있는 오류 발생
-정수를 0으로 나누는 경우
-배열보다 큰 인덱스로 배열의 원소를 접근
-존재하지 않는 파일을 읅으려고 할떄
-정수 입력을 기다리는 코드가 실행되고 있을때,문자가 입력

자바에서는 예외 처리 가능
-예외 발생 -> 자바 플랫폼 인지 -> 응용프로그램에서 전달

*try-catch-finally
try
{
   예외가 발생할 가능성이 있는 실행문(try 블록)
}
catch(처리할 예외 타입 선언)		//어떤 오류가 발생할지 모를 경우 - Exception e
				  이때 e는 예외객체이다.
{				
   예외 처리문(catch 블록)		//ex)e.printStackTrace(); -개발자용,디버깅용 오류 표시 코드
				//ex)System.out.println("예상치 못한 에러가 발생했습니다."); -유저용
}
finally
{
   예외 발생 여부와 상관없이 무조건 실행되는 문장(finally 블록)	//생략가능(try-catch는 필수)
}


*자바에서 예외처리가 주로 사용되는 부분
1.입출력
-파일,DB,네트워크

2.쓰레드(Thread)
-멀티쓰레드 구현시
위 2가지는 try-catch하지 않으면 이클립스에서 오류 메세지로 알려준다.


*예외타입(예외 클래스 - 예외도 클래스로 이루어져있다)
ArithmeticException			//정수를 0으로 나눌 때 발생
NullPointerException		//null 레퍼런스를 참조할 때 발생
ClassCastException			//변환할 수 없는 타입으로 객체를 변환할 때 발생
OutOfMemoryError			//메모리가 부족한 경우 발생
...
어떤 에러가 일어날지 모르겠다면 대표가 되는
Exception 사용


*catch 블록에 주로 작성하는 내용
1.에러메세지 출력
=>비중이 99%이상

2.에러 로그(log) 기록
=>예외가 발생하면 어떤 예외가 언제 발생했는지 로그에 기록

3.예외가 나면 다른 작업을 해야할때


*integer.parseInt
문자열 정수로 변환
ex) int j = integer.parseInt(stringNumber[i]);	//stringNumber[]에 담긴 문자열을 정수로 변환하여 j에 넣는다


*슈퍼 클래스->서브 클래스
클래스를 재사용하고 새로운 특성추가
ex)
class Animal{

	A특성
}

class Human extends Animal{		//extends : 확장 키워드(상속 받은것에 더해 새로운 특성 추가)

	B특성
}

Animal클래스를 상속 받은 Human은 A특성을 따로 선언하지 않아도 포함하고 있으며
exntends로 추가 한 B특성까지 가진다.
※Animal={A특성} ,  Human={A특성,B특성}


*다형성
메소드 오버로딩 : 같은 이름이지만 다르게 작동하는 여러 메소드
메소드 오버라이딩(상속전용) : 상속 받았지만 마음에 안드는 것을 수정하여 사용


*상하위 클래스
상위 - 부모, super, base(기반)
하위 - 자식, sub,   derived(파생)

*TOC(Total Of Cost)
: S/W가 탄생부터 폐기까지 드는 총비용

*OOP는 규모가 큰 프로젝트에 적합


*구조체와 같이 클래스 역시 사용자가 만드는 type(자료형)이다.
ex) 변수 선언시
int i;		// i 라는 변수 선언시 앞에 integer(정수형)이라는 type(자료형이 붙는다)
Circle pizza;	// p 라는 레퍼런스 변수 선언시 앞에 Circle(Class)이라는 type(자료형이 붙는다)

Class
1.객체생성기(설계도)
2.사용자정의 데이터 타입(자료형)


*객체 생성과 접근
Circle pizza;		//레퍼런스 변수 선언

pizza = new Circle();	//객체 생성

pizza.radius = 10;		//값 입력
pizza.name = "뭐시기"

double area = pizza.getArea();


*클래스를 초기화 할때는 생성자를 통해서 초기화를 하자!
-다형성, 생성자 오버로딩(같은 모습의 다양한 기능을 가진 클래스)
public class Circle{
	int a;
	String b;

	public Circle()		//패러미터가 없는 생성자
	{
	      ~~~
	}
	public Circle(int c, String d)	//패러미터가 있는 생성자
	{
	      ~~~~
	}

똑같은 Circle 클래스지만 패러미터가 있는 생성자와 없는 생성자, 서로 다른 기능을 가진다.
※이때 패러미터가 있는 생성자만 있을 경우,
public Circle(){} 기본 생성자를 작성하지 않을 경우 오류가 난다!
public class Circle{
	int a;
	String b;

	/*
	public Circle()		//패러미터가 없는 생성자
	{
	      ~~~
	}*/			//패러미터가 없는 생성자만 있으면 생략 가능
}

public class Circle{
	int a;
	String b;

	/*
	public Circle(int a)		//패러미터가 있는 생성자
	{
	      ~~~
	}*/			//패러미터가 있는 생성자만 있을때
}				   기본 생성자 public Circle(){} 생략시 오류가 난다!!

*this 객체 자신에 대한 레퍼런스
클래스(정확히 얘기하면 클래스로 만들어진 인스턴스) 자기 자신을 가리킨다
ex)
int radius;
public Circle(int radius)
{
   this.radius = radius;
}


*this()
오버로딩이 되어있을때
A생성자에서 B생성자를 호출 할때 사용한다.(권장 방법)
-첫번째 줄에 써야한다.
ex)
public Book(String title) {
	this(title,"작자미상");
}
public Book(String title, String author) {
	this.title = title; this.author = author;
}

-패러미터 하나 짜리 Book을 호출하면(패러미터 A사용한다고 가정했을때)
첫번쨰 패러미터 title에 A, 두번째 패러미터 "작자미상"을 사용하는 패러미터 두개짜리 Book이 다시 호출되고
this로 인해 인스턴스의 title에는 A가, author에는 B가 초기화된다.
※최종적으로 Book은 Book.title = "A",Book.author = "작자미상"을 가진 인스턴스가 된다.

객체 배열 선언과 생성
c= new Circle[5];				<->	c[i] = new Circle(1)
객체를 만드는게 아님				객체를 생성한다.(실행 메모리에 할당)
객체 참조값을 넣을수 있는 레퍼런스를 5개 만들어라

결과값)
c[0]						c[0]=>Cicle[0]
c[1]						c[1]=>Circle[1]
c[2]					<->	c[2]=>Circle[2]
c[3]						c[3]=>Circle[3]
c[4]						c[4]=>Circle[4]
(객체가 만들어진게 아닌				(객체 실제 생성, 실행 메모리에 객체가 생성되고
객체 참조값을 받을 수 있는 레퍼런스만 생성)		레퍼런스에 객체값 참조


※Circle 뒤에 붙어 있는게 배열에 쓰는 괄호인지,객체 생성에 쓰는 괄호인지 구분해야한다.


*Class 앞에 public이 붙으려면 자기자신의 파일에 선언되야한다.
※메인 메소드 위에 class를 선언 하려면 public을 붙이지 않아고 class (class명)으로 선언한다.


*메소드 형식
java의 method는 반드시 class 안에 위치


java의 패러미터 전달 방신
-1. call by value
값에 의한 참조. 값이 복사되어 전달
참조후 패러미터 변경 하여도 호출된 실제 값은 변하지 않는다

-2.call by reference
레퍼런스에 의한 참조. 객체나 배열의 레퍼런스만 전달
참조후 변경하면 실제 값에도 영향을 준다.