context
=> 사전적 의미 '문맥'
=>프로그래밍에서는 어떤 information을 갖는 객체나 대상을 의미한다.

-------------------------------------------------------------------------
get방식 요청 하는 방법
1.<form method ="get">
=>form에서는 get방식이 기본값

2.<a href="/board">
=> 링크를 이용한 요청은 get방식

3. locatio.href="/board"
=> javascript location 객체를 통해서 요청. get방식

=====> 서블릿의 doGet()가 호출됨

==============================================
post방식 요청

1.<form method = "post">

2. $ajax()에서 type:"post"로 지정

===> 서블릿의 doPost()가 호출됨
==============================================
MVC패턴에서는

Servlet을 이용해서 Controller를 작성.
주소를 서블릿에서 지정한 주소만 이용.

~.jsp 로 이동하면 안됨.

잘못된 예)
1.<form action ="join.jsp">
2.<a href = "/login.jsp">
3.location.href="boardList.jsp";

반드시 컨트롤러를 통해서 뷰로 이동해야한다.

------------------------------------------------------------------------------
자바의 장점

1.멀티쓰레드 지원

2.가비지 콜렉션 지원
=> 서버가 안정적

java+Oracle이 Enterprise 에서 수십년간 사랑받은 이유.

=>쓰레드가 생성될 때마다 메모리가 필요
=>동시접속자가 많으면? 서버의 메모리가 많이 필요. 분산처리 필요
=================================================
node.js는 single thread 기반으로 다른 매커니즘 사용
=> 서버의 사양이 적어도 가성비 좋은 퍼포먼스 제공

----------------------------------------------------------------------------------
*javascript:history.go(-1) == javascript.history.back()
현재 페이지의 전 단계(-1)로 돌아가라.
숫자 0이 기준점.



*jsp와 servlet의 성능
=> 초기의 jsp는 <% ... %> scriptlet을 많이 사용하면서
     성능이 servlet보다는 안 좋았지만

=> 나중에 jsp코드를 servlet으로 변환시켜 동작하게 바뀜
     jsp와 servlet의 성능차이 거의 없음

----------------------------------------------------------------------------------
<%@page session = "false" %>
세션을 사용하지 않게함. 세션이 필요없는 페이지에서 사용
=>튜닝.속도향상에 도움됨


*include 지시자
=>네비게이션이나, footer 등 모든 페이지에서 공통으로 사용하는 UI를 만들 때 사용
=>유지보수하기 편하다.

---------------------------------------------------------------------------------
다른페이지로 이동
1.redirect
=> URL주소가 변경됨.

2.forward
=> URL주소가 유지됨


새로운 프로그래밍 언어 공부를 할 때 가장 먼저 파악하는 것중 하나
A에서 B로 데이터를 어떻게 넘기고 받는가?

Action Tag
=> <% %> scriptlet을 사용하지 말고 태그로 구현하기 위해 만듬
=> UI(html)와 Login(java)을 분리하기 위한 노력중 하나
    새로운 태그를 만듬. html 태그가 아니므로 여전히 완전한 분리라고 하기 어렵다.
=> MVC패턴에서는 <%...%>를 거의 사용하지 않음.


